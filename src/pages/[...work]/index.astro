---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '../../layouts/PageLayout.astro';
import SinglePost from '../../components/blog/SinglePost.astro';
import ToWorkLink from '../../components/work/ToWorkLink.astro';

import { getCanonical, getPermalink } from '../../utils/permalinks';
import { getStaticPathsWorkPost, workPostRobots } from '../../utils/work';
import { findImage } from '../../utils/images';
import type { MetaData } from '../../types';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsWorkPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { work } = Astro.props as Props;

const url = getCanonical(getPermalink(work.permalink, 'post'));
const image = (await findImage(work.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: work.title,
    description: work.excerpt,
    robots: {
      index: workPostRobots?.index,
      follow: workPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] } : {}),
    },
  },
  { ...(work?.metadata ? { ...work.metadata, canonical: work.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <SinglePost post={{ ...work, image: image }} url={url} />
  <ToWorkLink />
</Layout>
